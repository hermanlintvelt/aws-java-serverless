# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: expenses-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws #indicate we are deploying to AWS
  profile: default #this much match a profile as defined in ~/.aws/credentials
  runtime: java11 #using Java 11
  lambdaHashingVersion: 20201221
  stage: development #use `development` environment - useful when you want to deploy different environments/stages
  region: af-south-1 #the AWS region to deploy to
  environment:
    STAGE: ${self:provider.stage} # you can define service wide environment variables here, e.g. the `STAGE` env var will allow my lambda handler code to check on which environment it is running
  iamRoleStatements: #the permissions needed by the Lambda functions to access other AWS resources
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
#    - Effect: 'Allow'
#      Action:
#        - 'lambda:InvokeFunction'
#      Resource:
#        - Fn::Join:
#            - ':'
#            - - arn:aws:lambda
#              - Ref: AWS::Region
#              - Ref: AWS::AccountId
#              - function:${self:service}-${self:provider.stage}-*


# this is the binary package that containst the code for the various lambda handlers, and dependency jars
package:
  artifact: build/distributions/expenses-service.zip

functions:
  hello:
    handler: com.example.expenses.lambda.HelloHandler
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here for creating e.g. DynamoDB tables, etc
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
