# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: expenses-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws #indicate we are deploying to AWS
  profile: default #this much match a profile as defined in ~/.aws/credentials
  runtime: java11 #using Java 11
  lambdaHashingVersion: 20201221
  stage: development #use `development` environment - useful when you want to deploy different environments/stages
  region: af-south-1 #the AWS region to deploy to
  environment:
    STAGE: ${self:provider.stage} # you can define service wide environment variables here, e.g. the `STAGE` env var will allow my lambda handler code to check on which environment it is running
  iamRoleStatements: #the permissions needed by the Lambda functions to access other AWS resources
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"

# this is the binary package that containst the code for the various lambda handlers, and dependency jars
package:
  artifact: build/distributions/expenses-service.zip

functions:
  get-expenses:
    handler: com.example.expenses.lambda.GetExpensesHandler
    timeout: 30
    events:
      - http:
          path: expenses
          method: get
          cors: true
  create-expense:
#    handler: com.example.expenses.lambda.CreateExpenseHandlerStart
    handler: com.example.expenses.lambda.CreateExpenseHandlerJsonNode
    timeout: 30
    events:
      - http:
          path: expenses
          method: post
          cors: true
